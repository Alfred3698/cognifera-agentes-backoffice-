image: docker:28

services:
  - docker:28-dind

variables:
  DOCKER_DRIVER: overlay2
  # Las siguientes variables vienen definidas automáticamente por GitLab para el Container Registry:
  # CI_REGISTRY: registry.gitlab.com
  # CI_REGISTRY_IMAGE: registry.gitlab.com/alfred3698/backoffice-service

stages:
  - build
  - deploy

before_script:
  # Autenticación en el Container Registry usando CI_JOB_TOKEN
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

build:
  stage: build
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    # Instala el cliente SSH en Alpine
    - apk update && apk add openssh-client
    # Inicia el agente SSH
    - eval $(ssh-agent -s)
    # Agrega la clave privada (almacenada en la variable SSH_PRIVATE_KEY)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # Configura el directorio SSH y añade el host del VPS a known_hosts
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H 82.180.132.214 >> ~/.ssh/known_hosts
  script:
    - >
      ssh root@82.180.132.214 "
        docker login -u gitlab-ci-token -p '$CI_JOB_TOKEN' registry.gitlab.com &&
        docker pull $CI_REGISTRY_IMAGE:latest &&
        docker stop backoffice-service || true &&
        docker rm backoffice-service || true &&
        docker run -d --name backoffice-service -p 8083:3000 -e REPORT_SERVICE_PORT='$REPORT_SERVICE_PORT' $CI_REGISTRY_IMAGE:latest
      "
  only:
    - main
